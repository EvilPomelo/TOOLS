 SSL通信-忽略证书认证错误
.NET的SSL通信过程中，使用的证书可能存在各种问题，某种情况下可以忽略证书的错误继续访问。可以用下面的方式跳过服务器证书验证，完成正常通信。

1.设置回调属性ServicePointManager.ServerCertificateValidationCallback

  注：这个属性设置为要用于客户端的服务器证书的自定义验证方法

       True：认证成功； False：认证失败。


 ServicePointManager.ServerCertificateValidationCallback =
           new RemoteCertificateValidationCallback(
                    OnRemoteCertificateValidationCallback);

// 忽略证书认证错误处理的函数
private bool OnRemoteCertificateValidationCallback(
  Object sender,
  X509Certificate certificate,
  X509Chain chain,
  SslPolicyErrors sslPolicyErrors)
{
  return true;  // 认证正常，没有错误
}

————————————————
     var cer = new X509Certificate2(path);
            if (cer != null)//获取公钥
            {
              RSACryptoServiceProvider pubkey = (RSACryptoServiceProvider)cer.PublicKey.Key;
            var isSig = pubkey.VerifyData(butys, CCB_ALG, verify);//验证信息
            }
————————————————
版权声明：本文为CSDN博主「似丶水无痕」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/ljz1985dd/article/details/82587167

var requestMessage = new HttpRequestMessage() {
    RequestUri = new Uri(new Uri(_configuration.Endpoint), "someendpoint"),
    Method = HttpMethod.Get
};
var handler = new HttpClientHandler {
    ClientCertificateOptions = ClientCertificateOption.Manual,
    SslProtocols = SslProtocols.Tls12,
};          
handler.ClientCertificates.Add(certificate);
handler.CheckCertificateRevocationList = false;
// this is required to get around untrusted self-signed certs
handler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;
var client = new HttpClient(handler);
requestMessage.Headers.Add("X-ARR-ClientCert", certificate.GetRawCertDataString());
var response = await client.SendAsync(requestMessage);

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class ProgramTest
{
static void Main(string[] args)
{
string url = "https://www.test.com";
string result = PostUrl(url, "key=123"); // key=4da4193e-384b-44d8-8a7f-2dd8b076d784
Console.WriteLine(result);
Console.WriteLine("OVER");
Console.ReadLine();
}
private static string PostUrl(string url, string postData)
{
HttpWebRequest request = null;
if (url.StartsWith("https", StringComparison.OrdinalIgnoreCase))
{
request = WebRequest.Create(url) as HttpWebRequest;
ServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(CheckValidationResult);
request.ProtocolVersion = HttpVersion.Version11;
// 这里设置了协议类型。
ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;// SecurityProtocolType.Tls1.2;
request.KeepAlive = false;
ServicePointManager.CheckCertificateRevocationList = true;
ServicePointManager.DefaultConnectionLimit = 100;
ServicePointManager.Expect100Continue = false;
}
else
{
request = (HttpWebRequest)WebRequest.Create(url);
}
request.Method = "POST";    //使用get方式发送数据
request.ContentType = "application/x-www-form-urlencoded";
request.Referer = null;
request.AllowAutoRedirect = true;
request.UserAgent = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727)";
request.Accept = "*/*";
byte[] data = Encoding.UTF8.GetBytes(postData);
Stream newStream = request.GetRequestStream();
newStream.Write(data, 0, data.Length);
newStream.Close();
//获取网页响应结果
HttpWebResponse response = (HttpWebResponse)request.GetResponse();
Stream stream = response.GetResponseStream();
//client.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
string result = string.Empty;
using (StreamReader sr = new StreamReader(stream))
{
result = sr.ReadToEnd();
}
return result;
}
private static bool CheckValidationResult(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors)
{
return true; //总是接受
}
}